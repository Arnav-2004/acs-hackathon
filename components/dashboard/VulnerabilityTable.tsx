import React, { useMemo } from "react";
import { View, Text, StyleSheet, ScrollView } from "react-native";
import {
  useFonts,
  Inter_600SemiBold,
  Inter_500Medium,
  Inter_400Regular,
} from "@expo-google-fonts/inter";

// Type definition for CVE data
interface CVE {
  cveid: string;
  epssscore: string;
  maxcvss: string;
  publisheddate: string;
  source: string;
  summary: string;
  updateddate: string;
}

interface VulnerabilityTablesProps {
  cves?: CVE[];
}

export const VulnerabilityTables = ({ cves }: VulnerabilityTablesProps) => {
  const [fontsLoaded] = useFonts({
    Inter_600SemiBold,
    Inter_500Medium,
    Inter_400Regular,
  });

  // Define vulnerability types to track
  const vulnerabilityTypes: any = [
    {
      name: "Overflow",
      keywords: [
        "overflow",
        "buffer overflow",
        "stack overflow",
        "heap overflow",
      ],
    },
    {
      name: "Memory Corruption",
      keywords: ["memory corruption", "memory safety"],
    },
    { name: "SQL Injection", keywords: ["sql injection", "sqli"] },
    {
      name: "XSS",
      keywords: ["xss", "cross site scripting", "cross-site scripting"],
    },
    {
      name: "Directory Traversal",
      keywords: ["directory traversal", "path traversal"],
    },
    {
      name: "File Inclusion",
      keywords: ["file inclusion", "include file", "rfi", "lfi"],
    },
    {
      name: "CSRF",
      keywords: [
        "csrf",
        "cross site request forgery",
        "cross-site request forgery",
      ],
    },
    { name: "XXE", keywords: ["xxe", "xml external entity"] },
    {
      name: "SSRF",
      keywords: [
        "ssrf",
        "server side request forgery",
        "server-side request forgery",
      ],
    },
    {
      name: "Open Redirect",
      keywords: ["open redirect", "unvalidated redirect"],
    },
    {
      name: "Input Validation",
      keywords: [
        "input validation",
        "improper validation",
        "insufficient validation",
      ],
    },
  ];

  // Define impact types to track
  const impactTypes = [
    {
      name: "Code Execution",
      keywords: [
        "execute code",
        "code execution",
        "arbitrary code",
        "remote code execution",
        "rce",
      ],
    },
    { name: "Bypass", keywords: ["bypass", "circumvent"] },
    {
      name: "Privilege Escalation",
      keywords: ["privilege escalation", "gain privilege"],
    },
    {
      name: "Denial of Service",
      keywords: ["denial of service", "dos", "crash"],
    },
    {
      name: "Information Leak",
      keywords: ["information leak", "information disclosure", "data leak"],
    },
  ];

  // Process CVE data to categorize vulnerabilities by year and type
  const vulnerabilityData = useMemo(() => {
    // Default to empty array if no CVEs provided
    if (!cves || cves.length === 0) {
      return { byType: [], byImpact: [] };
    }

    // Extract years from CVE data
    const years = new Set<string>();
    cves.forEach((cve) => {
      const year = cve.publisheddate.split("-")[0];
      years.add(year);
    });

    // Sort years chronologically
    const sortedYears = Array.from(years).sort();

    // Initialize data structures
    const byTypeData: Record<string, Record<string, number>> = {};
    const byImpactData: Record<string, Record<string, number>> = {};

    // Initialize counters for each year and vulnerability type
    sortedYears.forEach((year) => {
      byTypeData[year] = vulnerabilityTypes.reduce((acc: any, type: any) => {
        acc[type.name] = 0;
        return acc;
      }, {});

      byImpactData[year] = impactTypes.reduce((acc: any, type) => {
        acc[type.name] = 0;
        return acc;
      }, {});
    });

    // Add totals row
    byTypeData["Total"] = vulnerabilityTypes.reduce((acc: any, type: any) => {
      acc[type.name] = 0;
      return acc;
    }, {});

    byImpactData["Total"] = impactTypes.reduce((acc: any, type) => {
      acc[type.name] = 0;
      return acc;
    }, {});

    // Count CVEs by year and type
    cves.forEach((cve) => {
      const year = cve.publisheddate.split("-")[0];
      if (!byTypeData[year]) return; // Skip if year not in our range

      const summary = cve.summary.toLowerCase();

      // Check for vulnerability types
      vulnerabilityTypes.forEach(
        (vulnType: { name: string; keywords: string[] }) => {
          if (
            vulnType.keywords.some((keyword: string) =>
              summary.includes(keyword)
            )
          ) {
            byTypeData[year][vulnType.name]++;
            byTypeData["Total"][vulnType.name]++;
          }
        }
      );

      // Check for impact types
      impactTypes.forEach((impactType) => {
        if (impactType.keywords.some((keyword) => summary.includes(keyword))) {
          byImpactData[year][impactType.name]++;
          byImpactData["Total"][impactType.name]++;
        }
      });
    });

    // Convert to array format for table display
    const byTypeArray = Object.entries(byTypeData).map(([year, types]) => {
      return {
        year,
        ...types,
        // Calculate row total
        total: Object.values(types).reduce((sum, count) => sum + count, 0),
      };
    });

    const byImpactArray = Object.entries(byImpactData).map(
      ([year, impacts]) => {
        return {
          year,
          ...impacts,
          // Calculate row total
          total: Object.values(impacts).reduce((sum, count) => sum + count, 0),
        };
      }
    );

    return {
      byType: byTypeArray,
      byImpact: byImpactArray,
    };
  }, [cves]);

  // Default data for display when no CVEs are provided
  const defaultTypeData = [
    {
      year: "2015",
      Overflow: 1037,
      "Memory Corruption": 1104,
      "SQL Injection": 221,
      XSS: 776,
      "Directory Traversal": 152,
      "File Inclusion": 6,
      CSRF: 249,
      XXE: 50,
      SSRF: 8,
      "Open Redirect": 46,
      "Input Validation": 379,
      total: 4028,
    },
    {
      year: "2016",
      Overflow: 1180,
      "Memory Corruption": 1173,
      "SQL Injection": 97,
      XSS: 497,
      "Directory Traversal": 99,
      "File Inclusion": 12,
      CSRF: 87,
      XXE: 41,
      SSRF: 16,
      "Open Redirect": 33,
      "Input Validation": 519,
      total: 3754,
    },
    {
      year: "2017",
      Overflow: 2478,
      "Memory Corruption": 1542,
      "SQL Injection": 505,
      XSS: 1500,
      "Directory Traversal": 282,
      "File Inclusion": 155,
      CSRF: 334,
      XXE: 109,
      SSRF: 57,
      "Open Redirect": 97,
      "Input Validation": 936,
      total: 7995,
    },
    {
      year: "2018",
      Overflow: 2084,
      "Memory Corruption": 1731,
      "SQL Injection": 503,
      XSS: 2041,
      "Directory Traversal": 389,
      "File Inclusion": 112,
      CSRF: 479,
      XXE: 188,
      SSRF: 118,
      "Open Redirect": 85,
      "Input Validation": 1248,
      total: 8978,
    },
    {
      year: "2019",
      Overflow: 1205,
      "Memory Corruption": 2030,
      "SQL Injection": 544,
      XSS: 2387,
      "Directory Traversal": 489,
      "File Inclusion": 126,
      CSRF: 560,
      XXE: 137,
      SSRF: 131,
      "Open Redirect": 100,
      "Input Validation": 801,
      total: 8510,
    },
    {
      year: "2020",
      Overflow: 1217,
      "Memory Corruption": 1878,
      "SQL Injection": 465,
      XSS: 2201,
      "Directory Traversal": 436,
      "File Inclusion": 110,
      CSRF: 415,
      XXE: 119,
      SSRF: 131,
      "Open Redirect": 100,
      "Input Validation": 813,
      total: 7885,
    },
    {
      year: "2021",
      Overflow: 1563,
      "Memory Corruption": 2530,
      "SQL Injection": 742,
      XSS: 2724,
      "Directory Traversal": 548,
      "File Inclusion": 91,
      CSRF: 520,
      XXE: 126,
      SSRF: 192,
      "Open Redirect": 133,
      "Input Validation": 677,
      total: 9846,
    },
    {
      year: "2022",
      Overflow: 1863,
      "Memory Corruption": 3389,
      "SQL Injection": 1788,
      XSS: 3404,
      "Directory Traversal": 729,
      "File Inclusion": 96,
      CSRF: 769,
      XXE: 126,
      SSRF: 230,
      "Open Redirect": 146,
      "Input Validation": 779,
      total: 13319,
    },
    {
      year: "2023",
      Overflow: 1665,
      "Memory Corruption": 2278,
      "SQL Injection": 2120,
      XSS: 5136,
      "Directory Traversal": 768,
      "File Inclusion": 116,
      CSRF: 1392,
      XXE: 127,
      SSRF: 243,
      "Open Redirect": 180,
      "Input Validation": 624,
      total: 14649,
    },
    {
      year: "2024",
      Overflow: 791,
      "Memory Corruption": 2652,
      "SQL Injection": 2650,
      XSS: 7455,
      "Directory Traversal": 845,
      "File Inclusion": 257,
      CSRF: 1455,
      XXE: 112,
      SSRF: 375,
      "Open Redirect": 121,
      "Input Validation": 131,
      total: 16844,
    },
    {
      year: "2025",
      Overflow: 280,
      "Memory Corruption": 446,
      "SQL Injection": 477,
      XSS: 1843,
      "Directory Traversal": 147,
      "File Inclusion": 57,
      CSRF: 466,
      XXE: 17,
      SSRF: 72,
      "Open Redirect": 18,
      "Input Validation": 0,
      total: 3823,
    },
    {
      year: "Total",
      Overflow: 16453,
      "Memory Corruption": 20613,
      "SQL Injection": 10112,
      XSS: 29964,
      "Directory Traversal": 5163,
      "File Inclusion": 1138,
      CSRF: 6706,
      XXE: 1152,
      SSRF: 1545,
      "Open Redirect": 1080,
      "Input Validation": 7013,
      total: 100939,
    },
  ];

  const defaultImpactData = [
    {
      year: "2015",
      "Code Execution": 1430,
      Bypass: 176,
      "Privilege Escalation": 254,
      "Denial of Service": 1793,
      "Information Leak": 594,
      total: 4247,
    },
    {
      year: "2016",
      "Code Execution": 1239,
      Bypass: 482,
      "Privilege Escalation": 601,
      "Denial of Service": 2050,
      "Information Leak": 892,
      total: 5264,
    },
    {
      year: "2017",
      "Code Execution": 1820,
      Bypass: 847,
      "Privilege Escalation": 906,
      "Denial of Service": 3372,
      "Information Leak": 1365,
      total: 8310,
    },
    {
      year: "2018",
      "Code Execution": 1728,
      Bypass: 647,
      "Privilege Escalation": 831,
      "Denial of Service": 2207,
      "Information Leak": 1406,
      total: 6819,
    },
    {
      year: "2019",
      "Code Execution": 1546,
      Bypass: 664,
      "Privilege Escalation": 910,
      "Denial of Service": 1697,
      "Information Leak": 1318,
      total: 6135,
    },
    {
      year: "2020",
      "Code Execution": 1691,
      Bypass: 802,
      "Privilege Escalation": 1373,
      "Denial of Service": 1677,
      "Information Leak": 1090,
      total: 6633,
    },
    {
      year: "2021",
      "Code Execution": 2087,
      Bypass: 782,
      "Privilege Escalation": 1097,
      "Denial of Service": 2297,
      "Information Leak": 913,
      total: 7176,
    },
    {
      year: "2022",
      "Code Execution": 2067,
      Bypass: 902,
      "Privilege Escalation": 1486,
      "Denial of Service": 2437,
      "Information Leak": 1830,
      total: 8722,
    },
    {
      year: "2023",
      "Code Execution": 2580,
      Bypass: 910,
      "Privilege Escalation": 1276,
      "Denial of Service": 2560,
      "Information Leak": 1445,
      total: 8771,
    },
    {
      year: "2024",
      "Code Execution": 3071,
      Bypass: 695,
      "Privilege Escalation": 1125,
      "Denial of Service": 2450,
      "Information Leak": 970,
      total: 8311,
    },
    {
      year: "2025",
      "Code Execution": 408,
      Bypass: 117,
      "Privilege Escalation": 215,
      "Denial of Service": 512,
      "Information Leak": 133,
      total: 1385,
    },
    {
      year: "Total",
      "Code Execution": 20617,
      Bypass: 7004,
      "Privilege Escalation": 10283,
      "Denial of Service": 23052,
      "Information Leak": 11976,
      total: 72932,
    },
  ];

  // Determine which dataset to use
  const finalTypeData =
    vulnerabilityData.byType.length > 0
      ? vulnerabilityData.byType
      : defaultTypeData;
  const finalImpactData =
    vulnerabilityData.byImpact.length > 0
      ? vulnerabilityData.byImpact
      : defaultImpactData;

  // Function to get table cell color based on value
  const getCellColor = (value: number, max: number) => {
    if (value === 0) return "#272424";

    // Calculate intensity - higher values are more intense red
    const ratio = value / max;

    if (ratio < 0.2) return "#f5c2c7"; // Very light red
    if (ratio < 0.4) return "#ea868f"; // Light red
    if (ratio < 0.6) return "#e35d6a"; // Medium red
    if (ratio < 0.8) return "#d6293c"; // Dark red
    return "#dc3545"; // Very dark red
  };

  // Function to get text color based on background
  const getTextColor = (bgColor: string) => {
    if (bgColor === "#f8f9fa" || bgColor === "#f5c2c7") return "#000";
    return "#fff";
  };

  // Calculate maximum values for color scaling
  const maxTypeValue: number = Math.max(
    ...finalTypeData.map((row: Record<string, any>) =>
      Math.max(
        ...vulnerabilityTypes.map(
          (type: { name: string }) => row[type.name] || 0
        )
      )
    )
  );

  const maxImpactValue = Math.max(
    ...finalImpactData.map((row) =>
      Math.max(...impactTypes.map((type) => row[type.name] || 0))
    )
  );

  // Check if we have real data from CVEs
  const hasRealData =
    cves && cves.length > 0 && vulnerabilityData.byType.length > 0;

  if (!fontsLoaded) {
    return null;
  }

  return (
    <View style={styles.container}>
      {!hasRealData && (
        <Text style={styles.noDataText}>
          {cves && cves.length > 0
            ? "Processing CVE data. Sample data shown below."
            : "No CVE data provided. Showing sample data."}
        </Text>
      )}

      {/* Vulnerabilities by Type Table */}
      <Text style={styles.heading}>Vulnerabilities by types</Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={true}>
        <View>
          <View style={styles.tableRow}>
            <View style={styles.tableHeaderCell}>
              <Text style={styles.headerText}>Year</Text>
            </View>
            {vulnerabilityTypes.map((type: any, index: any) => (
              <View key={index} style={styles.tableHeaderCell}>
                <Text style={styles.headerText}>{type.name}</Text>
              </View>
            ))}
          </View>

          {finalTypeData.map((row: Record<string, any>, rowIndex) => (
            <View key={rowIndex} style={styles.tableRow}>
              <View
                style={[
                  styles.yearCell,
                  row.year === "Total" ? styles.totalCell : null,
                ]}
              >
                <Text
                  style={[
                    styles.yearText,
                    row.year === "Total" ? styles.totalText : null,
                  ]}
                >
                  {row.year}
                </Text>
              </View>

              {vulnerabilityTypes.map(
                (type: { name: string }, colIndex: number) => {
                  const value = row[type.name] || 0;
                  const bgColor =
                    row.year === "Total"
                      ? "#6722A8"
                      : getCellColor(value, maxTypeValue);
                  const textColor =
                    row.year === "Total" ? "#fff" : getTextColor(bgColor);

                  return (
                    <View
                      key={colIndex}
                      style={[styles.tableCell, { backgroundColor: bgColor }]}
                    >
                      <Text style={[styles.cellText, { color: textColor }]}>
                        {value}
                      </Text>
                    </View>
                  );
                }
              )}
            </View>
          ))}
        </View>
      </ScrollView>

      {/* Vulnerabilities by Impact Types Table */}
      <Text style={[styles.heading, { marginTop: 30 }]}>
        Vulnerabilities by impact types
      </Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={true}>
        <View>
          <View style={styles.tableRow}>
            <View style={styles.tableHeaderCell}>
              <Text style={styles.headerText}>Year</Text>
            </View>
            {impactTypes.map((type, index) => (
              <View key={index} style={styles.tableHeaderCell}>
                <Text style={styles.headerText}>{type.name}</Text>
              </View>
            ))}
          </View>

          {finalImpactData.map((row, rowIndex) => (
            <View key={rowIndex} style={styles.tableRow}>
              <View
                style={[
                  styles.yearCell,
                  row.year === "Total" ? styles.totalCell : null,
                ]}
              >
                <Text
                  style={[
                    styles.yearText,
                    row.year === "Total" ? styles.totalText : null,
                  ]}
                >
                  {row.year}
                </Text>
              </View>

              {impactTypes.map((type, colIndex) => {
                const value = row[type.name] || 0;
                const bgColor =
                  row.year === "Total"
                    ? "#6722A8"
                    : getCellColor(value, maxImpactValue);
                const textColor =
                  row.year === "Total" ? "#fff" : getTextColor(bgColor);

                return (
                  <View
                    key={colIndex}
                    style={[styles.tableCell, { backgroundColor: bgColor }]}
                  >
                    <Text style={[styles.cellText, { color: textColor }]}>
                      {value}
                    </Text>
                  </View>
                );
              })}
            </View>
          ))}
        </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginTop: 20,
    marginBottom: 20,
    backgroundColor: "transparent",
    borderRadius: 8,
    overflow: "hidden",
    padding: 20,
  },
  heading: {
    fontFamily: "Inter_600SemiBold",
    fontSize: 18,
    marginBottom: 10,
    marginLeft: 5,
    color: "#eee",
  },
  noDataText: {
    fontFamily: "Inter_400Regular",
    fontSize: 14,
    color: "#eee",
    fontStyle: "italic",
    marginBottom: 15,
    textAlign: "center",
  },
  tableRow: {
    flexDirection: "row",
  },
  tableHeaderCell: {
    backgroundColor: "#272424",
    padding: 10,
    width: 120,
    borderWidth: 1,
    borderColor: " rgba(39, 36, 36, 0.48)",
    alignItems: "center",
    justifyContent: "center",
  },
  headerText: {
    fontFamily: "Inter_600SemiBold",
    fontSize: 14,
    color: "#eee",
    textAlign: "center",
  },
  yearCell: {
    backgroundColor: "#272424",
    padding: 10,
    width: 120,
    borderWidth: 1,
    borderColor: " rgba(39, 36, 36, 0.48)",
    alignItems: "center",
    justifyContent: "center",
  },
  totalCell: {
    backgroundColor: "#1C1E20",
  },
  yearText: {
    fontFamily: "Inter_500Medium",
    fontSize: 14,
    color: "#FF8503",
  },
  totalText: {
    color: "#FF4203",
    fontFamily: "Inter_600SemiBold",
  },
  tableCell: {
    padding: 10,
    width: 120,
    borderWidth: 1,
    borderColor: "#111",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#111",
  },
  cellText: {
    fontFamily: "Inter_400Regular",
    fontSize: 14,
    textAlign: "center",
  },
});
